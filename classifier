import pandas as pd
import numpy as np
import re #正则表达式
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB #朴素贝叶斯
from sklearn.ensemble import RandomForestClassifier #随机森林
from sklearn.tree import DecisionTreeClassifier #决策树
from sklearn.neighbors import KNeighborsClassifier #KNN
'''
1.数据读取
'''
def readFile(url):
    data = pd.read_csv(url,parse_dates = ['Dates'])
    return data
'''
2.增加特征：时间段
'''
def getHourZn(hour):
    if(hour >= 1 and hour < 8): return 1;
    if(hour >= 8 and hour < 12): return 2;
    if(hour >= 12 and hour < 13): return 3;
    if(hour >= 13 and hour < 15): return 4;
    if(hour >= 15 and hour < 17): return 5;
    if(hour >= 17 and hour < 19): return 6;
    if(hour < 1 or hour >= 19): return 7;
'''
3.增加特征：季节段
'''
def getMonthZn(month):
    if(month < 3 or month >= 12): return 1; #冬
    if(month >= 3 and month < 6): return 2; #春
    if(month >= 6 and month < 9): return 3; #夏
    if(month >= 9 and month < 12): return 4; #秋
'''
4.地址是否包含/
'''
def define_address(addr):
    addr_type = 0
    if '/' in addr:
        addr_type = 1
    if 'Block' in addr:
        addr_type = 0
    return addr_type
'''
5.地址是否包含门牌号
'''
def Address_Num(addr):
    if len(re.findall(r"\d+",addr)) == 0:
        addr_num = 0
    else:
        addr_num = int(re.findall(r"\d+",addr)[0])
    return addr_num
'''
6.数据预处理
'''
def preProcessData(data):
    weekdays = {'Monday':0., 'Tuesday':1., 'Wednesday':2., 'Thursday': 3., 'Friday':4.,
    'Saturday':5., 'Sunday':6.}
    weekdays2 = {'Monday':0., 'Tuesday':0., 'Wednesday':0., 'Thursday': 0., 'Friday':0.,
    'Saturday':1., 'Sunday':1}
    districts = {c:i for i,c in enumerate(train['PdDistrict'].unique())}
    Year = data.Dates.dt.year #年
    Month = data.Dates.dt.month #月
    Day = data.Dates.dt.day #日
    Hour = data.Dates.dt.hour #时
    Minute = data.Dates.dt.minute #分
    Week = pd.DataFrame([float(weekdays[w]) for w in data.DayOfWeek]) #日期
    isWeekday = pd.DataFrame([float(weekdays2[w]) for w in data.DayOfWeek]) #是否是周末
    PdDistrict_Num = pd.DataFrame([float(districts[t]) for t in data.PdDistrict]) #街道编码
    #PdDistrict_Num = pd.get_dummies(data.PdDistrict) #街道二值化编码
    HourZn = pd.DataFrame(list(map(getHourZn,data['Dates'].dt.hour))) #时间段
    MonthZn = pd.DataFrame(list(map(getMonthZn,data['Dates'].dt.month))) # 季节段
    Address_Type = pd.DataFrame(list(map(define_address, data.Address)))
    Address_num = pd.DataFrame(list(map(Address_Num,data.Address)))
    X = data.X
    Y = data.Y
    leCrime = preprocessing.LabelEncoder()
    CategoryNum = leCrime.fit_transform(data.Category) #犯罪类型数值化编码
    data = pd.concat([Year,Month,Day,Hour,Minute,Week,isWeekday,PdDistrict_Num,HourZn,MonthZn,Address_Type,Address_num,X,Y],axis=1)
    data['CategoryNum'] = CategoryNum
    return data
'''
7.训练集划分
'''
def splitTrainData(train_data):
    training,validation = train_test_split(train_data,train_size=0.8)
    training_data = training.iloc[:,:-1]
    training_label = training['CategoryNum']
    validation_data = validation.iloc[:,:-1]
    validation_label = validation['CategoryNum']
    return training_data,training_label,validation_data,validation_label
'''
8.测试集划分
'''
def splitTestData(test_data):
    testing_data = test_data.iloc[:,:-1]
    testing_label = test_data['CategoryNum']
    return testing_data,testing_label
'''
9.随机森林训练
'''
def randomForestTrain(training_data,training_label,validation_data,validation_label):
    rfModel = RandomForestClassifier(max_depth=15,n_estimators=300)
    rfModel.fit(training_data,training_label)
    rfPredicted = rfModel.predict(validation_data)
    validation_label = np.array(validation_label)
    num = 0
    for i in range(len(validation_label)):
        if(rfPredicted[i] == validation_label[i]):
            num = num + 1
    accuracy = float(num/len(validation_label))
    print("随机森林验证集正确率",accuracy)
    return rfModel
'''
10.KNN训练
'''
def knnTrain(training_data,training_label,validation_data,validation_label):
    knnModel = KNeighborsClassifier(n_neighbors=50)
    knnModel.fit(training_data,training_label)
    knnPredicted = knnModel.predict(validation_data)
    validation_label = np.array(validation_label)
    num = 0
    for i in range(len(validation_label)):
        if(knnPredicted[i] == validation_label[i]):
            num = num + 1
    accuracy = float(num/len(validation_label))
    print("knn验证集正确率",accuracy)
    return knnModel
'''
11.决策树训练
'''
def dtTrain(training_data,training_label,validation_data,validation_label):
    dtModel = DecisionTreeClassifier()
    dtModel.fit(training_data,training_label)
    dtPredicted = dtModel.predict(validation_data)
    validation_label = np.array(validation_label)
    num = 0
    for i in range(len(validation_label)):
        if(dtPredicted[i] == validation_label[i]):
            num = num + 1
    accuracy = float(num/len(validation_label))
    print("决策树验证集正确率",accuracy)
    return dtModel
'''
12.朴素贝叶斯
'''
def bayesTrain(training_data,training_label,validation_data,validation_label):
    bayesModel =BernoulliNB()
    bayesModel.fit(training_data,training_label)
    bayesPredicted = bayesModel.predict(validation_data)
    validation_label = np.array(validation_label)
    num = 0
    for i in range(len(validation_label)):
        if(bayesPredicted[i] == validation_label[i]):
            num = num + 1
    accuracy = float(num/len(validation_label))
    print("朴素贝叶斯验证集正确率",accuracy)
    return bayesModel
'''
13.测试
'''
def Test(Model,testing_data,testing_label):
    Predicted = Model.predict(testing_data)
    testing_label = np.array(testing_label)
    num = 0
    for i in range(len(testing_label)):
        if(Predicted[i] == testing_label[i]):
            num = num + 1
    accuracy = float(num/len(testing_label))
    print("测试集正确率",accuracy)
    
if __name__=='__main__':
    train = readFile('train_data.csv')
    test = readFile('test_data.csv')
    train_data = preProcessData(train)
    test_data = preProcessData(test)
    training_data,training_label,validation_data,validation_label = splitTrainData(train_data)
    testing_data,testing_label = splitTestData(test_data)
    rfModel = randomForestTrain(training_data,training_label,validation_data,validation_label)
    Test(rfModel,testing_data,testing_label)
    '''
    bayesModel = bayesTrain(training_data,training_label,validation_data,validation_label)
    Test(bayesModel,testing_data,testing_label)
    knnModel = knnTrain(training_data,training_label,validation_data,validation_label)
    Test(knnModel,testing_data,testing_label)
    dtModel = dtTrain(training_data,training_label,validation_data,validation_label)
    Test(dtModel,testing_data,testing_label)
    '''
